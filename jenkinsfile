pipeline {
    agent any 

    tools {
        maven 'maven'
    }
    
    environment {
        SCANNER_HOME = tool 'sonarqube-01'
        SONAR_TOKEN = credentials('sonar-qube')
        DOCKER_IMAGE = 'aero1602/maven-application'
        DOCKER_TAG = "${env.BUILD_NUMBER}-${env.GIT_COMMIT}"
        AWS_REGION = 'ap-south-1'  // e.g., 'us-east-1'
        ECR_REPOSITORY = '905418475780.dkr.ecr.ap-south-1.amazonaws.com/devsecops/maven'
    }
    
    stages {
        stage("Git Checkout") {
            steps {
                git branch: 'main', changelog: false, poll: false, url: 'https://github.com/Arangarajan-Aero/spring-petclinic.git'
            }
        }
        
        stage("Compile") {
            steps {
                sh "mvn clean compile"
            }
        }
        
        stage("Test Cases") {
            steps {
                sh "mvn test"
            }
        }
        
        stage("SonarQube Analysis") {
            steps {
                script {
                    def projectName = 'Petclinic'
                    def projectKey = 'Petclinic'
                    def coverageThreshold = '80'
                    withSonarQubeEnv('sonar-qube') {
                        sh """
                            $SCANNER_HOME/bin/sonar-scanner \
                            -Dsonar.projectName=${projectName} \
                            -Dsonar.java.binaries=. \
                            -Dsonar.projectKey=${projectKey} \
                            -Dsonar.coverage.exclusions=**/*Test.class \
                            -Dsonar.qualitygate.wait=true \
                            -Dsonar.security.hotspots.enable=true \
                            -Dsonar.issue.severity=high \
                            -Dsonar.coverage.new=${coverageThreshold}
                        """
                    }
                }
            }
        }
        
        stage("OWASP Dependency Check") {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --format ALL', 
                                odcInstallation: 'dp-check', 
                                stopBuild: true  
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage("Quality Gate") {
            steps {
                script {
                    timeout(time: 60, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }

        stage("Build") {
            steps {
                sh "mvn clean install"
            }
        }
        
        stage("Dockerfile Linting with Hadolint") {
            steps {
                script {
                    if (fileExists('Dockerfile')) {
                        echo 'Dockerfile found, running Hadolint...'
                        sh """
                            docker run --rm -v \$(pwd):/workspace hadolint/hadolint hadolint /workspace/Dockerfile > hadolint_report.txt || echo 'Hadolint encountered issues, see hadolint_report.txt.'
                        """
                        archiveArtifacts artifacts: 'hadolint_report.txt', allowEmptyArchive: true
                    } else {
                        echo 'No Dockerfile found. Skipping Hadolint linting stage.'
                    }
                }
            }
        }

        stage("Build Docker Image") {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                    echo "Docker image built successfully"
                }
            }
        }

        stage("Docker Image Vulnerability Scanning with Trivy") {
            steps {
                // Scan the Docker image with Trivy and generate a PDF report
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sh """
                        trivy image --no-progress --exit-code 1 --severity HIGH,CRITICAL --format json -o trivy_report.json ${DOCKER_IMAGE}:${DOCKER_TAG}
                        trivy image --format pdf -o trivy_report.pdf ${DOCKER_IMAGE}:${DOCKER_TAG}
                    """
                    echo "Trivy scan completed. Reports generated."
                    archiveArtifacts artifacts: 'trivy_report.pdf', allowEmptyArchive: true
                }
            }
        }

        stage("Push to ECR") {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aces-key']]) {
                    script {
                        // Login to ECR
                        sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY}"
                        
                        // Tag the Docker image for ECR
                        sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${ECR_REPOSITORY}:${DOCKER_TAG}"
                        
                        // Push the Docker image to ECR
                        sh "docker push ${ECR_REPOSITORY}:${DOCKER_TAG}"
                        echo "Docker image ${DOCKER_IMAGE}:${DOCKER_TAG} pushed to ECR successfully"
                    }
                }
            }
        }
    } 
} 

def waitForQualityGate() {
    timeout(time: 1, unit: 'HOURS') {
        def result
        retry(5) {
            result = sh(script: "curl -s -u ${env.SONAR_TOKEN}: http://3.6.37.222:9000/api/qualitygates/project_status?projectKey=Petclinic", returnStdout: true)
            def json = readJSON(text: result)
            if (json.projectStatus.status != 'OK') {
                error "SonarQube Quality Gate failed with status: ${json.projectStatus.status}"
            }
            return json.projectStatus
        }
    }
}
